#!/usr/bin/env python3

# Copyright 2022 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import copy
import json
import requests
from datetime import datetime, timezone
from cve_title_parser import parse_cve_title

def getCVEStatus(state, state_reason):
    if state == "open":
        if state_reason == "reopened":
            return "unknown"
        return "open"
    
    if state == "closed":
        if state_reason == "not_planned":
            return "unfixed"
        if state_reason == "completed":
            return "fixed"

url = 'https://api.github.com/search/issues?q=is:issue+label:official-cve-feed+\
repo:kubernetes/kubernetes&per_page=100'

headers = {'Accept': 'application/vnd.github.v3+json'}
res = requests.get(url, headers=headers)
gh_items = res.json()['items']
# Use link header to iterate over pages
# https://docs.github.com/en/rest/overview/resources-in-the-rest-api#pagination
# https://datatracker.ietf.org/doc/html/rfc5988
# Please note that if there is a great number of pages, this unauthenticated
# request may be subject to rate limits and fail.
# https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting
while 'next' in res.links:
    res = requests.get(res.links['next']['url'], headers=headers)
    gh_items.extend(res.json()['items'])

feed_envelope = {
    'version': 'https://jsonfeed.org/version/1.1',
    'title': 'Kubernetes Vulnerability Announcements - CVE Feed',
    'home_page_url': 'https://kubernetes.io',
    'feed_url': 'https://kubernetes.io/docs/reference/issues-security/official-cve-feed/index.json',
    'description': 'Auto-refreshing official CVE feed for Kubernetes repository',
    'authors': [
        {
            'name': 'Kubernetes Community',
            'url': 'https://www.kubernetes.dev'
        }
    ],
    '_kubernetes_io': None,
    'items': None,
}
# format the timestamp the same way as GitHub RFC 3339 timestamps, with only seconds and not milli and microseconds.
root_kubernetes_io = {'feed_refresh_job': 'https://testgrid.k8s.io/sig-security-cve-feed#auto-refreshing-official-cve-feed',
                      'updated_at': datetime.now(timezone.utc).replace(tzinfo=None).isoformat(sep='T', timespec='seconds') + 'Z'}
feed_envelope['_kubernetes_io'] = root_kubernetes_io

cve_list = []
non_parsable_cve_list = []
for item in gh_items:
    # These keys respects the item jsonfeed spec https://www.jsonfeed.org/version/1.1/
    cve = {'content_text': None, 'date_published': None, 'external_url': None,
    'id': None,'summary': None, 'url': None, '_kubernetes_io': None}
    # This is a custom extension
    item_kubernetes_io = {'google_group_url': None, 'issue_number': None}
    cve['_kubernetes_io'] = item_kubernetes_io

    cve['url'] = item['html_url']
    cve['_kubernetes_io']['issue_number'] = item['number']
    cve['content_text'] = item['body']
    cve['date_published'] = item['created_at']
    cve['status'] = getCVEStatus(item['state'], item['state_reason'])

    try:
        cve_ids, description = parse_cve_title(item['title'])
        cve['summary'] = description

        first_cve_id = cve_ids[0]
        cve['id'] = first_cve_id
        cve['external_url'] = f'https://www.cve.org/cverecord?id={first_cve_id}'
        cve['_kubernetes_io']['google_group_url'] = f'https://groups.google.com/g/kubernetes-announce/search?q={first_cve_id}'

        # Add additional entries for any remaining CVE IDs
        for additional_cve_id in cve_ids[1:]:
            additional_cve = copy.deepcopy(cve)
            additional_cve['id'] = additional_cve_id
            additional_cve['external_url'] = f'https://www.cve.org/cverecord?id={additional_cve_id}'
            additional_cve['_kubernetes_io']['google_group_url'] = f'https://groups.google.com/g/kubernetes-announce/search?q={additional_cve_id}'
            cve_list.append(additional_cve)

        cve_list.append(cve)
    except LookupError:
        non_parsable_cve_list.append(item['title'])

feed_envelope['items'] = cve_list
json_feed = json.dumps(feed_envelope, sort_keys=False, indent=4)
print(json_feed)

if len(non_parsable_cve_list) != 0:
    exit(7)
